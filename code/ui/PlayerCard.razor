@using System;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using Facepunch.BombRoyale;

@namespace Facepunch.BombRoyale.UI
@attribute [StyleSheet( "/ui/PlayerCard.scss" )]
@inherits Panel

<div class="container p@(PlayerIndex) @(!Player.IsValid() ? "empty" : "") @((Player.IsValid() && Player.LifeState == LifeState.Dead) ? "dead" : "")">
    <label class="name">@(Player.IsValid() ? Player.Client.Name : "Empty")</label>
    <label class="index">P@(PlayerIndex)</label>

    <div class="avatar">
        <div class="inner"></div>
        <div class="head"></div>

        @if ( Player.IsValid() && Player.LifeState == LifeState.Dead )
        {
            <div class="dead"></div>
        }
    </div>

    <div class="lives">
        @if ( Player.IsValid() )
        {
            for ( var i = 0; i < Player.LivesLeft; i++ )
            {
                @:<div class="life"><div>
            }
        }
    </div>

    <div class="pickups">
        <div class="pickup bombs @(HasBombDisease() ? "diseased" : "")">
            <div class="icon"></div>
            <label class="label">@GetBombsLeft()</label>
        </div>

        <div class="pickup range @(HasRangeDisease() ? "diseased" : "")">
            <div class="icon"></div>
            <label class="label">@GetBombRange()</label>
        </div>

        <div class="pickup speed @(HasSpeedDisease() ? "diseased" : "")">
            <div class="icon"></div>
            <label class="label">@GetSpeedBoosts()</label>
        </div>

        @if ( Player.IsValid() && Player.HasSuperBomb )
        {
            @:<div class="superbomb"><div>
        }
    </div>
</div>

@code
{
    public BombRoyalePlayer Player => (Entity.FindByIndex( PlayerIndex ) as IClient)?.Pawn as BombRoyalePlayer;
    public int PlayerIndex { get; set; }

    protected override int BuildHash()
    {
        if ( !Player.IsValid() ) return 0;
        return HashCode.Combine( Player, Player.LifeState, Player.LivesLeft, Player.HasSuperBomb, Player.BombRange, Player.GetBombsLeft(), Player.SpeedBoosts, Player.Disease );
    }

    private bool HasRangeDisease() => Player.IsValid() && Player.Disease == DiseaseType.LowRange;
    private bool HasSpeedDisease() => HasFastDisease() || HasSlowDisease();
    private bool HasFastDisease() => Player.IsValid() && Player.Disease == DiseaseType.MoveFast;
    private bool HasSlowDisease() => Player.IsValid() && Player.Disease == DiseaseType.MoveSlow;
    private bool HasBombDisease() => Player.IsValid() && Player.Disease == DiseaseType.RandomBomb;

    private string GetBombsLeft() => (Player?.GetBombsLeft() ?? 0).ToString();

    private string GetBombRange()
    {
        if ( HasBombDisease() ) return "1";
        return (Player?.BombRange ?? 0).ToString();
    }

    private string GetSpeedBoosts()
    {
        if ( HasFastDisease() ) return "8";
        if ( HasSlowDisease() ) return "0";
        return (Player?.SpeedBoosts ?? 0).ToString();
    }
}
